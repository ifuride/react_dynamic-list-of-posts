{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","onOpenPost","toggleShowPost","post","id","_jsxs","children","_jsx","className","map","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","concat","deleteComment","commentId","Loader","NewCommentForm","setComments","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","errorMessage","setErrorMessage","_useState5","name","email","_useState6","_useState6$","setValues","_useState7","_useState8","errors","setErrors","clearError","handleChange","event","prev","_objectSpread","_defineProperty","target","value","addComment","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCommentResponse","wrap","_context","next","sent","_toConsumableArray","t0","finish","stop","apply","onSubmit","preventDefault","htmlFor","placeholder","classNames","onChange","PostDetails","comments","isFormShown","setIsFormShown","loadComments","commentsResponse","_x","useEffect","removeComment","_ref3","_callee2","visibleComments","_context2","filter","comment","_x2","href","UserSelector","users","selectedUserId","onUserSelection","isExpanded","setIsExpanded","handleDocumentClick","document","addEventListener","removeEventListener","selectedUser","useMemo","find","user","role","getPosts","userId","App","setUsers","setSelectedUserId","setPosts","_useState9","_useState10","_useState11","_useState12","setSelectedPost","loadUsers","usersResponse","message","loadPosts","postsFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8967e196.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null,\n  onOpenPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onOpenPost,\n}) => {\n  const toggleShowPost = (post: Post) => {\n    if (selectedPost && selectedPost.id === post.id) {\n      onOpenPost(null);\n    } else {\n      onOpenPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPost && selectedPost.id === post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => toggleShowPost(post)}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => toggleShowPost(post)}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { postComment } from '../api/comments';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post,\n  setComments: Dispatch<SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ post, setComments }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [{ name, email, body }, setValues] = useState({\n    name: '',\n    email: '',\n    body: '',\n    postId: null,\n  });\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const clearError = () => {\n    setTimeout(() => {\n      setErrorMessage('');\n    }, 3000);\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setValues(prev => ({ ...prev, [event.target.name]: event.target.value }));\n    setErrors(prev => ({ ...prev, [event.target.name]: false }));\n  };\n\n  const addComment = async () => {\n    setIsLoading(true);\n    try {\n      const newCommentResponse = await postComment({\n        name,\n        email,\n        body,\n        postId: post.id,\n      });\n\n      if ('statusCode' in newCommentResponse) {\n        setErrorMessage('There was an error. Please try again later.');\n        clearError();\n      } else {\n        setComments(prev => [...prev, newCommentResponse]);\n        setValues(prev => ({ ...prev, body: '' }));\n      }\n    } catch {\n      setErrorMessage('error');\n      clearError();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setErrors({\n      name: !name,\n      email: !email,\n      body: !body,\n    });\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    addComment();\n  };\n\n  const handleReset = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n      postId: null,\n    });\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      {errorMessage && !isLoading && (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          {errorMessage}\n        </div>\n      )}\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': errors.name,\n              },\n            )}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': errors.email,\n              },\n            )}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': errors.body,\n              },\n            )}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              {\n                'is-loading': isLoading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Post } from '../types/Post';\nimport { getComments, deleteComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isFormShown, setIsFormShown] = useState(false);\n\n  const clearError = () => {\n    setTimeout(() => {\n      setErrorMessage('');\n    }, 3000);\n  };\n\n  const loadComments = async (postId: number) => {\n    setIsLoading(true);\n    setIsFormShown(false);\n    setComments([]);\n    try {\n      const commentsResponse = await getComments(postId);\n\n      if ('statusCode' in commentsResponse) {\n        setErrorMessage('There was an error. Please try again later.');\n        clearError();\n      } else {\n        setComments(commentsResponse);\n      }\n    } catch {\n      setErrorMessage('Unable to load comments of the selected post.');\n      clearError();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (post) {\n      loadComments(post.id);\n    }\n  }, [post]);\n\n  const removeComment = async (commentId: number) => {\n    const visibleComments = comments.filter(\n      comment => comment.id !== commentId,\n    );\n\n    setComments(visibleComments);\n\n    try {\n      await deleteComment(commentId);\n\n      // setComments((prevComments) => {\n      //   return prevComments.filter(comment => comment.id !== commentId);\n      // });\n    } catch {\n      setErrorMessage('Unable to delete a comment');\n      clearError();\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {errorMessage && !isLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorMessage}\n            </div>\n          )}\n\n          {!isLoading && !errorMessage && (\n            !comments.length\n              ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <p className=\"title is-4\">Comments:</p>\n              )\n          )}\n\n          {comments.map(comment => (\n            <article\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n              key={comment.id}\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {!isLoading && !errorMessage && !isFormShown && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormShown(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormShown && (\n          <NewCommentForm\n            post={post}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUserId: number | null,\n  onUserSelection: (id: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserId,\n  onUserSelection,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setIsExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [isExpanded]);\n\n  const toggle = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  const selectedUser = useMemo(() => (\n    users.find(user => user.id === selectedUserId)\n  ), [selectedUserId]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        {\n          'is-active': isExpanded,\n        },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggle}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {isExpanded && (\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  {\n                    'is-active': selectedUser?.id === user.id,\n                  },\n                )}\n                onClick={() => {\n                  onUserSelection(user.id);\n                  setIsExpanded(false);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        )}\n\n      </div>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const clearError = () => {\n    setTimeout(() => {\n      setErrorMessage('');\n    }, 3000);\n  };\n\n  const loadUsers = async () => {\n    try {\n      const usersResponse = await getUsers();\n\n      setUsers(usersResponse);\n    } catch (error) {\n      setErrorMessage((error as Error).message);\n      clearError();\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadPosts = async (userId: number) => {\n    setIsLoading(true);\n    try {\n      const postsFromServer = await getPosts(userId);\n\n      if ('statusCode' in postsFromServer) {\n        setErrorMessage('There was an error. Please try again later.');\n        clearError();\n      }\n\n      setPosts(postsFromServer);\n    } catch {\n      setErrorMessage('Unable to load posts of the selected user.');\n      clearError();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      loadPosts(selectedUserId);\n    }\n  }, [selectedUserId]);\n\n  const handleUserSelection = (userId: number) => {\n    setSelectedUserId(userId);\n    setSelectedPost(null);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  onUserSelection={handleUserSelection}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {(!selectedUserId && !isLoading) && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {selectedUserId && !isLoading && !errorMessage && (\n                  posts.length\n                    ? (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        onOpenPost={setSelectedPost}\n                      />\n                    ) : (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}